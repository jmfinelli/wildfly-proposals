= Support Transactions during WildFly’s graceful shutdown
:author:   		 Manuel Finelli
:email:    		 jfinelli@redhat.com
:toc:      		 left
:icons:    		 font
:idprefix:
:idseparator:  	 -

== Overview

When employing WildFly in cloud environments, distributed transactions are not supported out of the box. In particular, Narayana (and, thus, the Transactions subsystem) has some [hard requirements](https://jbossts.blogspot.com/2022/04/narayana-on-cloud-part-1.html) that need to be satisfied. The goal of this proposal is to outline how distributed transactions should be safely terminated during the graceful shutdown of WildFly, with a particular focus on cloud environments.

=== Current Issues

_1.1 The following paragraphs in the `Current Issue` section provide a summary of the current logic governing the graceful shutdown of WildFly's Transactions subsystem. They do not propose any changes but serve the sole purpose of offering context to reviewers who may not be familiar with the Transactions subsystem of WildFly._

_1.2 WildFly’s graceful shutdown logic does not take into consideration that hosting entities can be shut down indefinitely, i.e. there will not be any restart after shutdown. From the point of view of WildFly’s Transactions subsystem, this scenario might develop into a data integrity issue. In fact, transactions might result in:
Heuristics, which can leave data in an inconsistent state
An in-doubt state, which might not be completed during suspension (i.e. WildFly’s state before shutdown)_

The reason behind this behaviour is that the suspension logic of Narayana, the framework behind WildFly’s Transactions subsystem, is premised on the assumption that it will eventually be resumed after it gets suspended. During suspension, Narayana attempts the completion of all transactions before leaving this task.

NOTE: Heuristic transactions cannot be resolved automatically thus they are left untouched during suspension and then they will be reported to the administrator when Narayana gets resumed.

_In cloud environments_, when hosting entities (e.g. containers, pods, virtual machines) are scaled down and their state is erased (e.g. their file system, ip address, and memory are deleted) WildFly cannot guarantee that all transactions will be completed and a data integrity issue might occur.

NOTE: There are additional complications when hosting entities crash (i.e. an unintentional shutdown occurs). This extreme scenario is beyond what WildFly can handle and the hosting cloud environment must provide the ability to recover the hosting entity from crashes. In this case, the state of the hosting entity (e.g. its file system, ip address, etc.) should be recovered by the cloud environment without the intervention of the administrator. In K8s, for example, the employment of StatefulSet creates a stable environment where crashes are handled automatically. If a particular cloud environment does not provide a guarantee similar to StatefulSet, it is not possible to employ WildFly’s Transaction Subsystem. *As there are no solutions to solve this extreme scenario within WildFly (as it is impossible to control the lifecycle of the host from WildFly), this proposal is only concerned with problem 1.2.*

== Issue Metadata

=== Issue

* [WFLY-17742](https://issues.jboss.org/browse/WFLY-17742)

=== Dev Contacts

* mailto:{jfinelli@redhat.com}[{Manuel Finelli}]

=== QE Contacts

* mailto:{istraka@redhat.com}[{Ivan Straka}]

=== Testing By

* [ ] Engineering
* [X] QE

=== Affected Projects or Components

* [wildfly-core](https://github.com/wildfly/wildfly-core)
* [wildfly](https://github.com/wildfly/wildfly)
* [narayana](https://github.com/jbosstm/narayana)

=== Relevant Installation Types
* [x] Traditional standalone server (unzipped or provisioned by Galleon)

* [x] Managed domain

* [x] OpenShift s2i

* [x] Bootable jar

== Requirements

=== Hard Requirements

* This proposal is about importing into WildFly the transactional functionalities of its Kubernetes Operator. It does not include any further improvements
* The Management Model of WildFly will not be modified
* The Transactions subsystem needs to become aware of in-doubt and heuristic transactions and delay its suspension until all in-doubt transactions are complete and all transactions that ended with a heuristic outcome have been resolved. This will guarantee data integrity in all scenarios, including situations when a negative timeout (i.e. indefinite waiting) is employed (e.g. in cloud environments)
* The administrator needs to receive notifications when the Transactions subsystem is causing delays in the graceful shutdown of WildFly, achieved through integration with the existing logging mechanism. This is especially true when a negative timeout is used (i.e. indefinite graceful shutdown). Moreover, internal details like 'ServerActivity' do not need to be prominent. Part of working out such a notification would be how to consistently describe a ServerActivity to the administrator in an understandable manner without exposing internal technical implementation details

=== Nice-to-Have Requirements

* Introducing an asynchronous graceful shutdown would enable all ServerActivity implementations to receive a pre-suspend/suspend signal concurrently. In this way, the timeout will have the same duration for all ServerActivity implementations.
* [The sequence to suspend](https://github.com/wildfly/wildfly-core/blob/22.0.1.Final/server/src/main/java/org/jboss/as/server/suspend/SuspendController.java#L62) ServerActivity implementations during WildFly’s graceful shutdown should be Last In First Out (LIFO), i.e. the last ServerActivity implementation that was registered during startup should be the first one to get suspended.

=== Non Requirements

* As discussed previously, in a cloud environment, when the hosting entity crashes, its state should be recovered by the cloud environment without the intervention of the administrator
* Further developments should be undertaken to modify the graceful shutdown of the EJB subsystem to make it transaction-aware

== Implementation Plan

*Aim of the proposal*. The Transactions subsystem's suspension needs to be modified to to properly delay WildFly’s graceful shutdown as long as there are transactions to complete. Of course, the administrator will be notified when subsystems are delaying WildFly’s suspension. This is especially true when a negative timeout is used (i.e. indefinite graceful shutdown). Moreover, internal details like 'ServerActivity' do not need to be prominent. Part of working out such a notification would be how to consistently describe a ServerActivity to the administrator in an understandable manner without exposing internal technical implementation details.

=== Narayana

Narayana will internally handle the lifecycle of transactions during suspension. From the point of view of the integrating party, Narayana should provide a blocking API to suspend itself and it should return control only when there are no transactions left to complete. Moreover, Narayana needs to provide a switch to suspend the creation of new transactions, which needs to be used only when no new transactions are needed.

=== WildFly

At the moment, WildFly’s graceful shutdown cannot be employed in cloud environments out of the box, especially when it comes to handling transactions during its suspension. In fact, as proved with WildFly’s Kubernetes Operator, before scaling down a pod hosting WildFly, all transactions must be completed.
Even though WildFly’s graceful shutdown already gives the possibility to wait indefinitely, the Transactions subsystem does not really take advantage of this feature. Moreover, there is also an open question about whether the graceful shutdown should be processed synchronously or asynchronously. Currently, the list of subsystems registered with WildFly’s Suspend Controller is processed synchronously, which has its pros and cons.

==== Modifications to WildFly’s Graceful Shutdown (wildfly-core)

Following, modifications to WildFly’s graceful shutdown are discussed in more detail.

*Sync or Async? ->* With regards to the open question presented in the overview, WildFly’s SuspendController synchronously calls pre-suspend and suspend on ServerActivity implementations. As a single timer is started to handle the overall graceful shutdown’s timeout, `ServerActivity` implementations (SAI) have to return very quickly from their pre-suspend/suspend routines to give enough time to other SAIs to process their pre-suspension/suspension. This means that timeout diminishes as SAIs process their suspension. This might result in prematurely cancelling the graceful shutdown for the last SAI in the queue as the overall timeout might have already elapsed. On the other hand, with a synchronous handling, WildFly suspends all registered SAIs one by one, which means that the next SAI does not receive the signal to pre-suspend/suspend until the current SAI has returned the call to pre-suspend/suspend. With an asynchronous suspension, this will no longer be the case and all SAIs will initiate their pre-suspension/suspension concurrently. As a consequence, SAIs should coordinate better their suspensions instead of relying on the intrinsic isolation of the synchronous approach.
*Proposed modifications.* Introducing an asynchronous graceful shutdown would enable all SAIs to receive a pre-suspend/suspend signal concurrently. In this way, the timeout will have the same duration for all SAIs.

*FIFO or LIFO ->* At the moment, the order to suspend SAIs in WildFly’s graceful shutdown is FIFO, i.e. the first SAI that gets registered at boot time is also the first SAI to get suspended. This logic does not respect the dependencies among MSC services forced during WildFly’s boot time. [The sequence to suspend](https://github.com/wildfly/wildfly-core/blob/22.0.1.Final/server/src/main/java/org/jboss/as/server/suspend/SuspendController.java#L62) SAIs during WildFly’s graceful shutdown should be Last In First Out (LIFO), i.e. the last SAI that was registered during startup should be the first SAI to get suspended. From the Transactions subsystem’s point of view, this would ensure that dependent subsystems get pre-suspended (and, subsequently, suspended) before the Transactions subsystem. The improvement introduced by the LIFO order is particularly relevant in case it is decided that the asynchronous processing will not be implemented.

== Test Plan

*wildfly-core.* As this proposal will not introduce new functionalities in wildfly-core, new testing is not needed.

*Transactions SAI.* Testing should be developed to make sure that in-doubt, heuristic, and in-flight transactions delay WildFly’s graceful shutdown. As a first step, we can test only WildFly on bare metal and then, if and when WildFly’s operator will be updated with modifications from this proposal, further testing might be developed in the cloud testing framework
 
== Community Documentation

As WildFly’s graceful shutdown should be modified, WildFly’s documentation should reflect the different behaviour. Moreover, it should be mentioned that, in a cloud environment, when the hosting entity crashes, its state should be recovered by the cloud environment without the intervention of the administrator

== Release Note Content

* Graceful shutdown is modified to take into account cases where WildFly will not be restarted/resumed. In particular, to complete a graceful shutdown, all transactions must now complete their life cycles
* It should be mentioned that, in a cloud environment, when the hosting entity crashes, its state should be recovered by the cloud environment without the intervention of the administrator
